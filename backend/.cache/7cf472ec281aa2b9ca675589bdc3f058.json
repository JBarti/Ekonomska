{"dependencies":[{"name":"/home/josip/Desktop/ProjektZaEkonomsku/Ekonomska/backend/node_modules/encodeurl/package.json","includedInParent":true,"mtime":1532732058300},{"name":"/home/josip/Desktop/ProjektZaEkonomsku/Ekonomska/backend/package.json","includedInParent":true,"mtime":1532731718634}],"generated":{"js":"/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl;\n\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\n\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\n\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\n\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl(url) {\n  return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);\n}","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":9,"column":0}},{"name":"module","generated":{"line":14,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"name":"exports","generated":{"line":14,"column":7},"source":"node_modules/encodeurl/index.js","original":{"line":14,"column":7}},{"generated":{"line":14,"column":14},"source":"node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"name":"encodeUrl","generated":{"line":14,"column":17},"source":"node_modules/encodeurl/index.js","original":{"line":14,"column":17}},{"generated":{"line":14,"column":26},"source":"node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":16,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":22,"column":0}},{"name":"ENCODE_CHARS_REGEXP","generated":{"line":22,"column":4},"source":"node_modules/encodeurl/index.js","original":{"line":22,"column":4}},{"generated":{"line":22,"column":26},"source":"node_modules/encodeurl/index.js","original":{"line":22,"column":26}},{"generated":{"line":22,"column":132},"source":"node_modules/encodeurl/index.js","original":{"line":22,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":24,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":29,"column":0}},{"name":"UNMATCHED_SURROGATE_PAIR_REGEXP","generated":{"line":29,"column":4},"source":"node_modules/encodeurl/index.js","original":{"line":29,"column":4}},{"generated":{"line":29,"column":38},"source":"node_modules/encodeurl/index.js","original":{"line":29,"column":38}},{"generated":{"line":29,"column":112},"source":"node_modules/encodeurl/index.js","original":{"line":29,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":31,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":36,"column":0}},{"name":"UNMATCHED_SURROGATE_PAIR_REPLACE","generated":{"line":36,"column":4},"source":"node_modules/encodeurl/index.js","original":{"line":36,"column":4}},{"generated":{"line":36,"column":39},"source":"node_modules/encodeurl/index.js","original":{"line":36,"column":39}},{"generated":{"line":36,"column":51},"source":"node_modules/encodeurl/index.js","original":{"line":36,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":38,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"name":"encodeUrl","generated":{"line":56,"column":9},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":9}},{"generated":{"line":56,"column":18},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"name":"url","generated":{"line":56,"column":19},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":20}},{"generated":{"line":56,"column":22},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"generated":{"line":56,"column":24},"source":"node_modules/encodeurl/index.js","original":{"line":56,"column":25}},{"generated":{"line":57,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":2}},{"name":"String","generated":{"line":57,"column":9},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"url","generated":{"line":57,"column":16},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":16}},{"generated":{"line":57,"column":19},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"replace","generated":{"line":57,"column":21},"source":"node_modules/encodeurl/index.js","original":{"line":58,"column":5}},{"generated":{"line":57,"column":28},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"UNMATCHED_SURROGATE_PAIR_REGEXP","generated":{"line":57,"column":29},"source":"node_modules/encodeurl/index.js","original":{"line":58,"column":13}},{"generated":{"line":57,"column":60},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"UNMATCHED_SURROGATE_PAIR_REPLACE","generated":{"line":57,"column":62},"source":"node_modules/encodeurl/index.js","original":{"line":58,"column":46}},{"generated":{"line":57,"column":94},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"replace","generated":{"line":57,"column":96},"source":"node_modules/encodeurl/index.js","original":{"line":59,"column":5}},{"generated":{"line":57,"column":103},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"ENCODE_CHARS_REGEXP","generated":{"line":57,"column":104},"source":"node_modules/encodeurl/index.js","original":{"line":59,"column":13}},{"generated":{"line":57,"column":123},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"encodeURI","generated":{"line":57,"column":125},"source":"node_modules/encodeurl/index.js","original":{"line":59,"column":34}},{"generated":{"line":57,"column":134},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"generated":{"line":57,"column":135},"source":"node_modules/encodeurl/index.js","original":{"line":57,"column":2}},{"generated":{"line":58,"column":0},"source":"node_modules/encodeurl/index.js","original":{"line":60,"column":1}}],"sources":{"node_modules/encodeurl/index.js":"/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl\n\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g\n\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g\n\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2'\n\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl (url) {\n  return String(url)\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\n}\n"},"lineCount":null}},"hash":"c44a5f79c29b6122db0d1565a7232d88","cacheData":{"env":{}},"id":115}